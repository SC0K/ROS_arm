#!/usr/bin/env python3

import rospy
from rbx1_scripts.msg import executePoseGoalAction, executePoseGoalGoal, executePoseGoalResult, executePoseGoalFeedback
import actionlib
from geometry_msgs.msg import Pose

if __name__ == '__main__':
    rospy.init_node('pose_goal_client')

    # Create an action client for the "executePoseGoal_as" action server
    client = actionlib.SimpleActionClient('executePoseGoal_as', executePoseGoalAction)
    client.wait_for_server()

    # Prompt the user for the goal coordinates
    pose_goal = Pose()
    pose_goal.position.x = float(input('Enter the x-coordinate of the goal position: '))
    pose_goal.position.y = float(input('Enter the y-coordinate of the goal position: '))
    pose_goal.position.z = float(input('Enter the z-coordinate of the goal position: '))
    pose_goal.orientation.x = float(input('Enter the x-coordinate of the goal orientation: '))
    pose_goal.orientation.y = float(input('Enter the y-coordinate of the goal orientation: '))
    pose_goal.orientation.z = float(input('Enter the z-coordinate of the goal orientation: '))
    pose_goal.orientation.w = float(input('Enter the w-coordinate of the goal orientation: '))

    # Create a goal message
    goal = executePoseGoalGoal()
    goal.goal_pose = pose_goal

    # Send the goal to the action server and wait for a result
    client.send_goal(goal)
    client.wait_for_result()

    # Print the result
    result = client.get_result()
    rospy.loginfo('Result: {}'.format(result))
